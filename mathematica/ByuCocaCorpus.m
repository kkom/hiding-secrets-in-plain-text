(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["ByuCocaCorpus`",{"DatabaseLink`"}]

ByuCocaPQuery::usage="Later"
ByuCocaC1Query::usage="Later"
ByuCocaC2Query::usage="Later"
ByuCocaSuperintervalQuery::usage="Later"

Begin["`Private`"]

genConnection[host_,credentials_]:=genConnection[host,credentials]=
OpenSQLConnection[
JDBC["PostgreSQL",host],
"Username"->First[credentials],
"Password"->Last[credentials]
];

genTableName[dataset_,N_,n_]:=genTableName[dataset,N,n]=
"byu_coca_corpus."<>
"\""<>ToString[N]<>"gram_"<>dataset<>
"_"<>ToString[n]<>"\"";

genColumnNames[n_]:=genColumnNames[n]=Map["w"<>ToString[#1]&,Range[n]];

selectRows[conn_,table_,cond_,cols_,vals_]:=
selectRows[conn,table,cond,cols,vals]=
SQLSelect[
conn,
table,
{"p","c1","c2"},
Apply[And, MapThread[#1[SQLColumn[#2],#3]&,{cond,cols,vals}]]
];

selectSequenceStatRow[conn_,dataset_,N_,S_]:=selectRows[
conn,
genTableName[dataset,N,Length[S]],
Table[Equal,{Length[S]}],
genColumnNames[Length[S]],
S
];

getSequenceStat[$Failed,_]:=Throw["Failed to select database rows."];
getSequenceStat[{},1]:=0;
getSequenceStat[{},2|3]:=Throw["Sequence doesn't exist."];
getSequenceStat[rows_List,i_]:=If[
Length[rows]==1,
Flatten[rows][[i]],
Throw["Fetched more than one row corresponding to a sequence."]
];

cutSequences[s_,S_,N_]:={
Take[s,-Min[Length[s],N]],
Take[S,-Min[Length[S],N-Length[s]]]
};

makeList[x_List]:=x;
makeList[x_]:={x};

p[conn_,dataset_,N_,s_,S_]:=Module[{sCut,SCut},
{sCut,SCut}=cutSequences[makeList[s],makeList[S],N];
getSequenceStat[selectSequenceStatRow[conn,dataset,N,Join[SCut,sCut]],1]/getSequenceStat[selectSequenceStatRow[conn,dataset,N,SCut],1]
];

c[conn_,dataset_,N_,s_,S_,cIndex_]:=Module[{sCut,SCut,C1,P,c},
{sCut,SCut}=cutSequences[makeList[s],makeList[S],N];
{P,C1}=getSequenceStat[selectSequenceStatRow[conn,dataset,N,SCut],{1,2}];
c=getSequenceStat[selectSequenceStatRow[conn,dataset,N,Join[SCut,sCut]],cIndex+1];
(c-C1)/P
];

ByuCocaPQuery[host_,credentials_,dataset_,N_]:=
Function[{s,S},p[genConnection[host,credentials],dataset,N,s,S]];

ByuCocaC1Query[host_,credentials_,dataset_,N_]:=
Function[{s,S},c[genConnection[host,credentials],dataset,N,s,S,1]];

ByuCocaC2Query[host_,credentials_,dataset_,N_]:=
Function[{s,S},c[genConnection[host,credentials],dataset,N,s,S,2]];

End[]

EndPackage[]
